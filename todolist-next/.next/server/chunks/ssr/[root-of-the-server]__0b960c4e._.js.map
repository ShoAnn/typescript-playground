{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/anwarr/project/web/typescript/todolist-next/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\nimport { PrismaClient } from '@prisma/client';\n\n// This prevents instantiating a new PrismaClient in development during hot-reloads.\nconst prismaClientSingleton = () => {\n  return new PrismaClient();\n};\n\ndeclare global {\n  var prisma: undefined | ReturnType<typeof prismaClientSingleton>;\n}\n\nconst prisma = globalThis.prisma ?? prismaClientSingleton();\n\nexport default prisma;\n\nif (process.env.NODE_ENV !== 'production') globalThis.prisma = prisma;\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,oFAAoF;AACpF,MAAM,wBAAwB;IAC5B,OAAO,IAAI,6HAAA,CAAA,eAAY;AACzB;AAMA,MAAM,SAAS,WAAW,MAAM,IAAI;uCAErB;AAEf,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///home/anwarr/project/web/typescript/todolist-next/src/app/actions/action.ts"],"sourcesContent":["\"use server\"\n\nimport { revalidatePath } from \"next/cache\"\nimport prisma from \"../../../lib/prisma\";\n\nexport async function createTask(data: FormData) {\n\ttry {\n\t\tawait prisma.task.create({\n\t\t\tdata: {\n\t\t\t\ttitle: data.get(\"title\") as string,\n\t\t\t\tuserId: 1\n\t\t\t},\n\t\t});\n\t} catch (error) {\n\t\tconsole.error(\"Failed to create todo:\", error);\n\t\t// Optionally, return an error message to the client\n\t\treturn { message: \"Failed to create todo.\" };\n\t}\n\n\t// Revalidate the path to trigger a re-render\n\tconsole.log(\"START REVALIDATING\")\n\trevalidatePath(\"/\");\n\tconsole.log(\"END\")\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEO,eAAe,WAAW,IAAc;IAC9C,IAAI;QACH,MAAM,6GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,MAAM;gBACL,OAAO,KAAK,GAAG,CAAC;gBAChB,QAAQ;YACT;QACD;IACD,EAAE,OAAO,OAAO;QACf,QAAQ,KAAK,CAAC,0BAA0B;QACxC,oDAAoD;QACpD,OAAO;YAAE,SAAS;QAAyB;IAC5C;IAEA,6CAA6C;IAC7C,QAAQ,GAAG,CAAC;IACZ,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,QAAQ,GAAG,CAAC;AACb;;;IAlBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///home/anwarr/project/web/typescript/todolist-next/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {createTask as '40653e6991ef16349580fadb4eca0c59fd6a94ad7a'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///home/anwarr/project/web/typescript/todolist-next/src/app/components/TaskList.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { createTask } from '../actions/action';\n\ninterface Task {\n    id: number;\n    title: string;\n    completed: boolean;\n    userId: number;\n    createdAt: Date;\n    updatedAt: Date;\n}\n\nexport default function TaskList() {\n    const [tasks, setTasks] = useState<Task[]>([])\n    const [loading, setLoading] = useState(true)\n    useEffect(() => {\n        async function fetchtasks() {\n            try {\n                const response = await fetch('/api/tasks', { cache: 'no-store' })\n                const data = await response.json()\n                setTasks(data)\n            } catch (error) {\n                console.error('Error fetching tasks:', error)\n            } finally {\n                setLoading(false)\n            }\n        }\n\n        fetchtasks()\n    }, [])\n\n    if (loading) return <div>Loading...</div>\n\n    return (\n        <div className='w-full flex flex-col items-center justify-center'>\n            <form action={createTask}>\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    placeholder=\"Add task\"\n                    required\n                />\n                <button type=\"submit\"> + </button>\n            </form>\n            <table className='w-[80%] text-center my-4'>\n                <thead>\n                    <tr>\n                        <th><strong>id</strong></th>\n                        <th><strong>title</strong></th>\n                        <th><strong>status</strong></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tasks.map((task) => (\n                        <tr key={task.id}>\n                            <td>{task.id}</td>\n                            <td>{task.title}</td>\n                            <td>{task.completed ? \"✅\" : \"❌\"}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAWe,SAAS;IACpB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU,EAAE;IAC7C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,eAAe;YACX,IAAI;gBACA,MAAM,WAAW,MAAM,MAAM,cAAc;oBAAE,OAAO;gBAAW;gBAC/D,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,SAAS;YACb,EAAE,OAAO,OAAO;gBACZ,QAAQ,KAAK,CAAC,yBAAyB;YAC3C,SAAU;gBACN,WAAW;YACf;QACJ;QAEA;IACJ,GAAG,EAAE;IAEL,IAAI,SAAS,qBAAO,8OAAC;kBAAI;;;;;;IAEzB,qBACI,8OAAC;QAAI,WAAU;;0BACX,8OAAC;gBAAK,QAAQ,+HAAA,CAAA,aAAU;;kCACpB,8OAAC;wBACG,MAAK;wBACL,MAAK;wBACL,aAAY;wBACZ,QAAQ;;;;;;kCAEZ,8OAAC;wBAAO,MAAK;kCAAS;;;;;;;;;;;;0BAE1B,8OAAC;gBAAM,WAAU;;kCACb,8OAAC;kCACG,cAAA,8OAAC;;8CACG,8OAAC;8CAAG,cAAA,8OAAC;kDAAO;;;;;;;;;;;8CACZ,8OAAC;8CAAG,cAAA,8OAAC;kDAAO;;;;;;;;;;;8CACZ,8OAAC;8CAAG,cAAA,8OAAC;kDAAO;;;;;;;;;;;;;;;;;;;;;;kCAGpB,8OAAC;kCACI,MAAM,GAAG,CAAC,CAAC,qBACR,8OAAC;;kDACG,8OAAC;kDAAI,KAAK,EAAE;;;;;;kDACZ,8OAAC;kDAAI,KAAK,KAAK;;;;;;kDACf,8OAAC;kDAAI,KAAK,SAAS,GAAG,MAAM;;;;;;;+BAHvB,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;AAUxC","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///home/anwarr/project/web/typescript/todolist-next/src/app/page.tsx"],"sourcesContent":["import TaskList from \"./components/TaskList\";\n\nexport default function HomePage() {\n    return (\n        <main className=\"w-screen\">\n            <TaskList />\n        </main>\n    )\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACpB,qBACI,8OAAC;QAAK,WAAU;kBACZ,cAAA,8OAAC,qIAAA,CAAA,UAAQ;;;;;;;;;;AAGrB","debugId":null}}]
}