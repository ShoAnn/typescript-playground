{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/anwarr/project/web/typescript/todolist-next/src/app/api/tasks/route.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport { error } from \"console\";\nimport { stat } from \"fs\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nconst prisma = new PrismaClient();\n\nexport async function GET() {\n    try {\n        const users = await prisma.task.findMany()\n        return NextResponse.json(users)\n    } catch (error) {\n        return NextResponse.json({ error: 'Failed to fetch users' }, { status: 500 })\n    }\n}\n\nexport async function POST(request: NextRequest) {\n    try {\n        const body = request.json()\n        const { title } = body\n\n        if (!title) {\n            return NextResponse.json(\n                { error: 'title is empty' },\n                { status: 400 }\n            )\n        }\n        const task = await prisma.task.create({\n            data: {\n                title\n            }\n        })\n        return NextResponse.json({ task, status: 201 })\n    } catch (error) {\n        return NextResponse.json({ error: 'Failed to fetch users' }, { status: 500 })\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AAGA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe;IAClB,IAAI;QACA,MAAM,QAAQ,MAAM,OAAO,IAAI,CAAC,QAAQ;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACJ;AAEO,eAAe,KAAK,OAAoB;IAC3C,IAAI;QACA,MAAM,OAAO,QAAQ,IAAI;QACzB,MAAM,EAAE,KAAK,EAAE,GAAG;QAElB,IAAI,CAAC,OAAO;YACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAEtB;QACA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YAClC,MAAM;gBACF;YACJ;QACJ;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;YAAM,QAAQ;QAAI;IACjD,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACJ","debugId":null}}]
}